@startuml Rental Car Booking System Sequence Diagram

title "Rental Car Booking System"

actor User
actor Admin

participant "<<JavaScript>>\n:Server" as server
participant "<<Router>>\n:Cars" as routerCars
participant "<<Controller>>\n:CarsController" as controllerCars
participant "<<Model>>\n:Car" as modelCar
database "<<MongoDB>>\n:CarsDB" as carsDatabase

== User views all cars ==
User -> server ++ : GET /cars
server -> routerCars ++ : app.use('/cars', cars)
routerCars -> controllerCars ++ : getCars(req.query)
controllerCars -> modelCar ++ : find(req.query)
modelCar -> carsDatabase ++ : Fetch car data
carsDatabase --> modelCar -- : Car data
controllerCars <-- modelCar -- : Car data
controllerCars -> User -- : Response (list of cars)

== User books a car ==
User -> server ++ : POST /bookings
server -> routerCars ++ : app.use('/bookings', bookings)
participant "<<Controller>>\n:BookingsController" as controllerBookings
participant "<<Model>>\n:Booking" as modelBooking
database "<<MongoDB>>\n:BookingsDB" as bookingsDatabase
routerCars -> controllerBookings ++ : createBooking(req.body)
controllerBookings -> modelBooking ++ : create(req.body)
modelBooking -> bookingsDatabase ++ : Save booking data
bookingsDatabase --> modelBooking -- : Booking saved
controllerBookings <-- modelBooking -- : Booking confirmation
controllerBookings -> User -- : Response (booking confirmation)

== Admin adds a new car ==
Admin -> server ++ : POST /cars
server -> routerCars ++ : app.use('/cars', cars)
routerCars -> controllerCars ++ : addCar(req.body)
controllerCars -> modelCar ++ : create(req.body)
modelCar -> carsDatabase ++ : Save car data
carsDatabase --> modelCar -- : Car added
controllerCars <-- modelCar -- : Car confirmation
controllerCars -> Admin -- : Response (car added successfully)

@enduml