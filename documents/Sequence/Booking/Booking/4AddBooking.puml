@startuml Manage Booking (Add One Booking)

header Sample Booking Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Booking (Add One Booking)"

' --------------------------------------------------------------------
actor "User" as user
actor "Admin" as admin
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:cars" as routerCars
participant "<<router>>\n:bookings" as routerBookings
participant "<<middleware>>\n:auth" as middlewareAuth
participant "<<model>>\n:User" as modelUser
participant "<<controllers>>\n:bookings" as controllersBookings
participant "<<model>>\n:booking" as modelBookings
database "<<MongoDB>>\n:bookings" as BookingsDatabase
database "<<MongoDB>>\n:users" as UsersDatabase

' --------------------------------------------------------------------
user -> server ++: req.get('/cars/:carId/bookings')
admin -> server ++: req.get('/cars/:carId/bookings')

server -> routerCars ++: app.use('/cars', cars)
routerCars -> routerBookings ++: app.use('/carId/bookings/', bookingRouter)
routerBookings -> middlewareAuth ++: protect(token)
middlewareAuth -> modelUser ++: findById(decode.id)
modelUser -> UsersDatabase ++: findById(decode.id)
modelUser <-- UsersDatabase --: user

middlewareAuth <-- modelUser --:user
middlewareAuth --> routerBookings --: next()


routerBookings -> middlewareAuth ++: authorize("admin", "user")
routerBookings <-- middlewareAuth --: next()

routerBookings -> controllersBookings ++: getBookings()

controllersBookings -> modelBookings ++: find()

modelBookings -> BookingsDatabase ++: BookingSchema
BookingsDatabase --> modelBookings --: booking
controllersBookings <-- modelBookings --: booking
controllersBookings -> admin --: response
controllersBookings -> user --: response

' --------------------------------------------------------------------
@enduml
